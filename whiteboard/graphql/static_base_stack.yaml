AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Task object GraphQL via AppSync using Lambda and DynamoDB.

Resources:

  ### DynamoDB Table for Storing Tasks ###
  TaskDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tasks
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST


  ### IAM Role for Lambda to DynamoDB ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaSTSRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt TaskDB.Arn  # Restrict to this table
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - appsync:Invoke
                Resource: "*"

  ### Lambda Function for AppSync Resolver ###
  TaskPythonLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole  # Ensures IAM role exists first
    Properties:
      FunctionName: TaskResolverLambda
      Handler: task_lambda.handler
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: graphql-datasource-lambda
        S3Key: task_lambda.zip
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref TaskDB  # Ensure Lambda gets table name
          DYNAMODB_ENDPOINT: "http://localhost:4566"  # LocalStack-friendly

  ### AppSync API ###
  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: TaskAppSyncAPI
      AuthenticationType: API_KEY

  ### AppSync Schema (Changed to Inline for LocalStack) ###
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Definition: |
        type Task {
          id: ID!
          title: String!
          status: String!
        }

        type Query {
          getTask(id: ID!): Task
        }

        type Mutation {
          createTask(id: ID!, title: String!, status: String!): Task
        }

        schema {
          query: Query
          mutation: Mutation
        }


  ### Lambda as AppSync Data Source ###
  LambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn:
      - AppSyncApi
      - TaskPythonLambdaFunction
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: LambdaDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt TaskPythonLambdaFunction.Arn
      ServiceRoleArn: !GetAtt LambdaExecutionRole.Arn

  ### API Key for AppSync Access ###
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId

Outputs:
  LambdaFunctionArn:
    Description: "Lambda function ARN"
    Value: !GetAtt TaskPythonLambdaFunction.Arn

  LambdaDataSourceName:
    Description: "Lambda Data Source Name"
    Value: !Ref LambdaDataSource
    Export:
      Name: !Sub "${AWS::StackName}-LambdaDataSourceName"

  AppSyncApiId:
    Description: "The ID of the created AppSync API"
    Value: !GetAtt AppSyncApi.ApiId
    Export:
      Name: !Sub "${AWS::StackName}-AppSyncApiId"

  GraphQLApiEndpoint:
    Description: "GraphQL API Endpoint"
    Value: !GetAtt AppSyncApi.GraphQLUrl

  AppSyncApiKey:
    Description: "API Key for AppSync"
    Value: !GetAtt AppSyncApiKey.ApiKey
